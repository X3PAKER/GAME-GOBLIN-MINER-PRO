/* Goblin Miner Pro - Frontend demo
   - Phaser 3 canvas animation (goblin, pickaxe, tokens)
   - YM accrual, claim, convert (mock), withdraw request log
   - Music toggle (WebAudio simple synth)
   - Telegram WebApp detection (if run inside Telegram)
*/

// ---- CONFIG ----
const CONFIG = {
  YM_TO_USDT: 0.001,   // 1 YM = 0.001 USDT demo
  BASE_RATE: 0.5,     // YM per second base
  CLAIM_INTERVAL_SEC: 86400, // daily claim (demo not enforced here)
  WITHDRAW_FEE_USDT: 0.8
};

// ---- STATE ----
let state = {
  ym: 0,
  usdt: 0,
  rate: CONFIG.BASE_RATE,
  multiplier: 1,
  withdrawLog: []
};

// UI refs
const ymEl = () => document.getElementById('ym');
const usdtEl = () => document.getElementById('usdt');
const rateEl = () => document.getElementById('rate');
const tgUserEl = () => document.getElementById('tgUser');

function updateUI() {
  ymEl().innerText = Math.floor(state.ym);
  usdtEl().innerText = state.usdt.toFixed(3);
  rateEl().innerText = (state.rate * state.multiplier).toFixed(2);
}

// ---- Music (simple synth) ----
let audioCtx=null, osc=null, musicOn=true;
function startMusic(){
  if(!audioCtx) audioCtx = new (window.AudioContext||window.webkitAudioContext)();
  if(osc) return;
  osc = audioCtx.createOscillator();
  const gain = audioCtx.createGain(); gain.gain.value = 0.02;
  osc.connect(gain); gain.connect(audioCtx.destination);
  osc.type = "sine"; osc.frequency.value = 220;
  osc.start();
}
function stopMusic(){ if(osc){osc.stop();osc=null;} }
document.getElementById('musicToggle').addEventListener('click', ()=>{
  musicOn = !musicOn;
  document.getElementById('musicToggle').innerText = 'Nhạc: ' + (musicOn ? 'ON':'OFF');
  if(musicOn) startMusic(); else stopMusic();
});
if(musicOn) startMusic();

// ---- Withdraw log UI ----
function appendWithdrawLog(text){
  state.withdrawLog.unshift({ t: new Date().toLocaleString(), text });
  const container = document.getElementById('withdrawLog');
  container.innerHTML = state.withdrawLog.map(x=>`<div>• ${x.t} — ${x.text}</div>`).join('');
}

// ---- Withdraw request
document.getElementById('withdrawReq').addEventListener('click', ()=>{
  const addr = document.getElementById('withdrawAddress').value.trim();
  const network = document.getElementById('network').value;
  if(!addr) return alert('Nhập địa chỉ để rút');
  if(state.usdt <= 0) return alert('Không có USDT trong tài khoản');
  const amt = state.usdt;
  state.usdt = 0;
  appendWithdrawLog(`Rút ${amt.toFixed(3)} USDT → ${addr} (${network}) — TRẠNG: PENDING (admin duyệt)`);
  updateUI();
});

// show log
document.getElementById('showLog').addEventListener('click', ()=> {
  alert('Log rút tiền (bên dưới panel) — admin cần duyệt thủ công.');
});

// ---- Convert YM -> USDT (in-game conversion)
document.getElementById('convertBtn').addEventListener('click', ()=>{
  const ym = Math.floor(state.ym);
  if(ym <= 0) return alert('Không có YM để đổi');
  const usdt = ym * CONFIG.YM_TO_USDT;
  state.ym -= ym;
  state.usdt += usdt;
  updateUI();
  alert(`Đã đổi ${ym} YM → ${usdt.toFixed(3)} USDT (in-game). Tạo lệnh rút để rút về mạng.`);
});

// ---- Claim (instant in demo) ----
document.getElementById('claimBtn').addEventListener('click', ()=>{
  const bonus = Math.floor(state.ym*0.0); // here for demo, we just update UI
  alert(`Bạn có ${Math.floor(state.ym)} YM đang có. (Claim demo chỉ cập nhật UI)`);
});

// ---- Upgrades / purchase buttons (demo)
document.querySelectorAll('.upgrade .buy').forEach(btn=>{
  btn.addEventListener('click', (e)=>{
    const el = e.target.closest('.upgrade');
    const id = el.dataset.id;
    if(id === 'pick_c'){ alert('Cuốc Gỗ miễn phí: bạn đã có sẵn.'); return; }
    // mock purchase: reduce usdt balance and increase rate
    const priceUsdt = id==='pick_b' ? 10 : id==='pick_a' ? 30 : 0;
    if(state.usdt < priceUsdt){ return alert('Bạn không đủ USDT (in-game) để mua cuốc này. Bạn cần đổi YM → USDT trước.'); }
    state.usdt -= priceUsdt;
    state.rate += (id==='pick_b'?2:4);
    updateUI();
    alert('Mua thành công: ' + el.querySelector('.u-title').innerText);
  });
});

// ---- TELEGRAM DETECTION ----
let tg = null;
if(window.Telegram && window.Telegram.WebApp){
  tg = window.Telegram.WebApp;
  try{
    const user = tg.initDataUnsafe && tg.initDataUnsafe.user ? tg.initDataUnsafe.user : null;
    tgUserEl().innerText = user ? `${user.first_name || user.username} (${user.id})` : 'In Telegram';
  }catch(e){ tgUserEl().innerText = 'Telegram (unknown)'; }
} else {
  tgUserEl().innerText = 'Not in Telegram';
}
document.getElementById('telegramInfo').addEventListener('click', ()=>{
  alert('Mở app trong Telegram: gắn URL Vercel vào BotFather (Menu Button → Web App).');
});

// ---- PHASER GAME (visuals + mining loop) ----
const config = {
  type: Phaser.AUTO,
  parent: 'phaser-container',
  width: 920,
  height: 560,
  backgroundColor: 0xe6f9ff,
  scene: { preload, create, update }
};
const game = new Phaser.Game(config);

function preload(){
  // create simple textures procedurally (forest bg, goblin, pickaxe, token)
  // forest background gradient using graphics
  this.load.image('leaf', 'data:image/svg+xml;utf8,' + encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='200' height='200'><rect width='100%' height='100%' fill='#dffaf6'/></svg>`));
}

function create(){
  const scene = this;
  // background layers - subtle parallax
  const g = scene.add.graphics();
  g.fillStyle(0xdffaf6,1); g.fillRect(0,0,920,560);
  // ground
  scene.add.rectangle(460,490,920,140,0x5dd0a4).setDepth(0);
  // stones
  for(let i=0;i<12;i++){
    const x = Phaser.Math.Between(40,880);
    const y = Phaser.Math.Between(420,520);
    scene.add.ellipse(x,y,Phaser.Math.Between(18,60),Phaser.Math.Between(8,20),0x8ea69a).setAlpha(0.6);
  }

  // create goblin texture procedurally
  const tex = scene.textures.createCanvas('gob', 64, 64);
  const ctx = tex.getContext();
  // body
  ctx.fillStyle = '#9be6a8';
  ctx.beginPath(); ctx.ellipse(32,34,20,18,0,0,Math.PI*2); ctx.fill();
  // hat
  ctx.fillStyle = '#6b4e3a'; ctx.fillRect(12,4,40,18); ctx.fillStyle='#ffffff'; ctx.fillRect(18,8,28,6);
  // nose
  ctx.fillStyle = '#f4a0a0'; ctx.beginPath(); ctx.ellipse(32,34,6,4,0,0,Math.PI*2); ctx.fill();
  // eyes
  ctx.fillStyle='#1f2937'; ctx.fillRect(24,28,4,4); ctx.fillRect(36,28,4,4);
  tex.refresh();

  // pickaxe texture
  const ptex = scene.textures.createCanvas('pick', 40,40);
  const pc = ptex.getContext();
  pc.fillStyle='#6b4e3a'; pc.fillRect(15,0,6,28);
  pc.fillStyle='#c9c9c9'; pc.fillRect(4,4,20,6);
  ptex.refresh();

  // token texture
  const ttex = scene.textures.createCanvas('token',14,14);
  const tc = ttex.getContext();
  tc.fillStyle='#ffd166'; tc.beginPath(); tc.arc(7,7,6,0,Math.PI*2); tc.fill();
  ttex.refresh();

  // sprite: goblin
  const gob = scene.add.sprite(300,380,'gob').setScale(3).setDepth(2);
  // pickaxe
  const pick = scene.add.image(340,340,'pick').setScale(1.6).setDepth(1);

  // bobbing animation
  scene.tweens.add({ targets: gob, y: gob.y-8, duration:900, yoyo:true, repeat:-1, ease:'Sine.easeInOut' });
  scene.tweens.add({ targets: pick, angle:{from:-30,to:30}, duration:700, yoyo:true, repeat:-1, ease:'Sine.easeInOut' });

  // particles emitter for tokens
  const particles = scene.add.particles('token');
  const emitter = particles.createEmitter({
    x: gob.x, y: gob.y-40, lifespan: 1000, speedY: {min:-120,max:-220}, speedX:{min:-40,max:40}, gravityY:300, quantity:0
  });

  // click to manual mine
  gob.setInteractive();
  gob.on('pointerdown', ()=>{
    // small burst
    emitter.explode(8, gob.x + Phaser.Math.Between(-20,20), gob.y-30);
    state.ym += 1 * state.multiplier;
    updateUI();
    // quick pick swing effect
    scene.tweens.add({ targets: pick, angle:-70, duration:120, yoyo:true });
    if(musicOn && audioCtx){
      const s = audioCtx.createOscillator(), g = audioCtx.createGain();
      s.type='square'; s.frequency.value=800; g.gain.value=0.02;
      s.connect(g); g.connect(audioCtx.destination); s.start(); setTimeout(()=>{ s.stop(); },80);
    }
  });

  // automatic mining loop (per second)
  scene.time.addEvent({ delay: 1000, loop: true, callback: ()=>{
    const gain = (state.rate * state.multiplier);
    state.ym += gain;
    // show tiny particles proportional to gain
    const count = Math.min(12, Math.round(gain*2));
    if(count>0) emitter.explode(count, gob.x + Phaser.Math.Between(-40,40), gob.y-30);
    updateUI();
  }});

  // HUD text inside canvas
  scene.hud = scene.add.text(20,20,'', { font:'16px Inter', fill:'#05386b' });

  // store references
  this.gob = gob; this.emitter = emitter;
}

function update(){
  // could animate HUD
  if(this && this.hud) this.hud.setText('Goblin đang đào... (click để đào tay)');
}

// ---- init UI values
updateUI();

// ---- small helper - boost purchase demo
document.getElementById('ym').addEventListener('click', ()=> alert('YM token demo.'));


// At load: if Telegram WebApp available, call init
if(window.Telegram && window.Telegram.WebApp){
  try{ window.Telegram.WebApp.ready(); }catch(e){}
}

// ---- end of script ----
